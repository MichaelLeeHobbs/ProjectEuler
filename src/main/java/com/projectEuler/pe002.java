package com.projectEuler;

import org.junit.runners.model.InitializationError;

import java.util.LinkedList;

import static com.projectEuler.utils.Fibonacci.getNthTerm;

/**
 * Created by michael on 1/31/15.
 * Tag: data structures, modulus
 */
public class pe002 extends peSolution {

    // Even Fibonacci numbers
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    // test value: 89 should return 44

    // set base data and test data
    public pe002() {
        super("PE002", "4000000", "89");
    }


    public String solution(String data, String format) throws InitializationError {
        startTimer();
        setData(data);

        int max = getArgInt(1);

        LinkedList<Integer> evenFib = new LinkedList<Integer>();

        int term = 0;
        for (int i = 1; term <= max; i++){
            term = getNthTerm(i);

            // check for max term and if is even
            if (term <= max && term % 2 == 0){
                evenFib.add(term);
            }
        }

        int result = 0;
        for (int i : evenFib){
            result += i;
        }

        stopTimer();
        return getResult(format, Integer.toString(result));
    }

}
